{"version":3,"sources":["constants/index.js","components/app-header/index.jsx","components/filter/index.jsx","components/filters/index.jsx","components/movie-card/index.jsx","utilities/index.js","components/movie-list/index.jsx","app.jsx","serviceWorker.js","index.js"],"names":["API","API_KEY","V3","V4","BASE_URI","window","location","protocol","IMAGES_URI","AppHeader","props","react_default","a","createElement","className","Filter","type","onChange","id","value","htmlFor","name","Filters","Object","keys","genres","map","genre","components_filter","key","onChangeGenreFilters","defaultValue","min","max","step","onChangeMinRating","MovieCard","src","concat","movie","poster_path","alt","title","original_title","genre_ids","overview","MovieList","error","JSON","stringify","movies","filters","arguments","length","undefined","minRating","filter","every","includes","vote_average","filterMovies","components_movie_card","App","state","event","currentTarget","index","_this","indexOf","setState","_this2","this","fetch","Content-Type","then","res","json","results","sort","movA","movB","popularity","catch","reduce","acc","app_header","components_filters","components_movie_list","Component","Boolean","hostname","match","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sUAAaA,SAAM,CACjBC,QAAS,CACPC,GAAI,mCACJC,GACE,uOAEJC,SAAUC,OAAOC,SAASC,SAAW,0BACrCC,WAAYH,OAAOC,SAASC,SAAW,0BCG1BE,EARG,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eCIJC,eAPA,SAAAL,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,WAAWC,SAAUP,EAAMO,SAAUC,GAAIR,EAAMS,QAC3DR,EAAAC,EAAAC,cAAA,SAAOO,QAASV,EAAMS,OAAQT,EAAMW,SCuBzBC,EAzBC,SAAAZ,GAAK,OACnBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACZS,OAAOC,KAAKd,EAAMe,QAAQC,IAAI,SAAAC,GAAK,OAClChB,EAAAC,EAAAC,cAACe,EAAD,CACEC,IAAKF,EACLN,KAAMX,EAAMe,OAAOE,GACnBV,SAAUP,EAAMoB,qBAChBX,MAAOQ,OAIbhB,EAAAC,EAAAC,cAAA,SACEG,KAAK,SACLe,aAAa,IACbC,IAAI,IACJC,IAAI,KACJC,KAAK,MACLjB,SAAUP,EAAMyB,kBAChBjB,GAAG,eAELP,EAAAC,EAAAC,cAAA,SAAOO,QAAQ,cAAf,oBCSWgB,eA7BG,SAAA1B,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,eACVuB,IAAG,GAAAC,OAAKtC,EAAIQ,WAAT,QAAA8B,OAA0B5B,EAAM6B,MAAMC,aACzCC,IAAK/B,EAAM6B,MAAMG,QAEnB/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,WCJkB0B,EDIF7B,EAAM6B,MCJC,GAAAD,OAC1BC,EAAMG,OADoBJ,OAE3BC,EAAMG,QAAUH,EAAMI,eAAtB,qBAAAL,OACyBC,EAAMI,eAD/B,KAEI,MDCAhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UACGH,EAAM6B,MAAMK,UAAUlB,IAAI,SAAAC,GAAK,OAC9BhB,EAAAC,EAAAC,cAAA,MAAIgB,IAAKF,EAAOb,UAAU,cACvBJ,EAAMe,OAAOE,QAKtBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAIH,EAAM6B,MAAMM,cCjBA,IAAAN,ICOXO,EAZG,SAAApC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cAChBJ,EAAMqC,MACLpC,EAAAC,EAAAC,cAAA,SAAImC,KAAKC,UAAUvC,EAAMqC,QDSH,SAACG,GAAD,IAASC,EAATC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAmB,GAAIG,EAAvBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAmC,EAAnC,OAC1BF,EAAOM,OACL,SAAAjB,GAAK,OACHY,EAAQM,MAAM,SAAAD,GAAM,OAAIjB,EAAMK,UAAUc,SAASF,MACjDjB,EAAMoB,cAAgBJ,ICXtBK,CAAalD,EAAMwC,OAAQxC,EAAMyC,QAASzC,EAAM6C,WAAW7B,IAAI,SAAAa,GAAK,OAClE5B,EAAAC,EAAAC,cAACgD,EAAD,CAAWhC,IAAKU,EAAMG,MAAOH,MAAOA,EAAOd,OAAQf,EAAMe,aC6DlDqC,6MA/DbC,MAAQ,CAAEb,OAAQ,GAAIH,MAAO,KAAMI,QAAS,GAAI1B,OAAQ,GAAI8B,UAAW,KACvEzB,qBAAuB,SAAAkC,GACrB,IAAM9C,GAAM8C,EAAMC,cAAc/C,GAC1BgD,EAAQC,EAAKJ,MAAMZ,QAAQiB,QAAQlD,GACzCiD,EAAKE,SAAS,CACZlB,SACa,IAAXe,EACIC,EAAKJ,MAAMZ,QAAQb,OAAOpB,GAC1BiD,EAAKJ,MAAMZ,QAAQK,OAAO,SAAAA,GAAM,OAAIA,IAAWtC,SAGzDiB,kBAAoB,SAAA6B,GAAK,OACvBG,EAAKE,SAAS,CAAEd,WAAYS,EAAMC,cAAc9C,4FAE9B,IAAAmD,EAAAC,KAElBC,MAAK,GAAAlC,OAAItC,EAAII,SAAR,8BAAAkC,OAA6CtC,EAAIC,QAAQC,IAAM,CAClEuE,eAAgB,qBAEfC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACJL,EAAKD,SAAS,CACZnB,OAAQyB,EAAIE,QAAQC,KAClB,SAACC,EAAMC,GAAP,OAAgBA,EAAKC,WAAaF,EAAKE,iBAI5CC,MAAM,SAAAnC,GAAK,OAAIuB,EAAKD,SAAS,CAAEtB,YAElCyB,MAAK,GAAAlC,OAAItC,EAAII,SAAR,6BAAAkC,OAA4CtC,EAAIC,QAAQC,IAAM,CACjEuE,eAAgB,qBAEfC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GFtCe,IAAAlD,EEuCnB6C,EAAKD,SAAS,CAAE5C,QFvCGA,EEuCiBkD,EAAIlD,OFtC9CA,EAAO0D,OAAO,SAACC,EAAKzD,GAElB,OADAyD,EAAIzD,EAAMT,IAAMS,EAAMN,KACf+D,GACN,SEqCEF,MAAM,SAAAnC,GAAK,OAAIuB,EAAKD,SAAS,CAAEtB,6CAIlC,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwE,EAAD,MACA1E,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACyE,EAAD,CACEnC,QAASoB,KAAKR,MAAMZ,QACpB1B,OAAQ8C,KAAKR,MAAMtC,OACnBK,qBAAsByC,KAAKzC,qBAC3BK,kBAAmBoC,KAAKpC,oBAE1BxB,EAAAC,EAAAC,cAAC0E,EAAD,CACExC,MAAOwB,KAAKR,MAAMhB,MAClBI,QAASoB,KAAKR,MAAMZ,QACpB1B,OAAQ8C,KAAKR,MAAMtC,OACnB8B,UAAWgB,KAAKR,MAAMR,UACtBL,OAAQqB,KAAKR,MAAMb,kBAxDbsC,aCIEC,QACW,cAA7BpF,OAAOC,SAASoF,UAEe,UAA7BrF,OAAOC,SAASoF,UAEhBrF,OAAOC,SAASoF,SAASC,MACvB,2DCZNC,IAASC,OAAOlF,EAAAC,EAAAC,cAACiF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.32b014e8.chunk.js","sourcesContent":["export const API = {\n  API_KEY: {\n    V3: '25407f7c807d02fb57fef8ee0586086c',\n    V4:\n      'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyNTQwN2Y3YzgwN2QwMmZiNTdmZWY4ZWUwNTg2MDg2YyIsInN1YiI6IjVjOTI3NzgyOTI1MTQxMGI2ZjllZjFiMSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kJRCj6S5AQi3AWCvL7ZFTh7SycVpTGamIcr88jMkDUM',\n  },\n  BASE_URI: window.location.protocol + '//api.themoviedb.org/3/',\n  IMAGES_URI: window.location.protocol + '//image.tmdb.org/t/p/',\n}\n","import React from 'react'\n\nconst AppHeader = props => (\n  <header className='app-header'>\n    <div className='app-logo' />\n    <h1>Currently airing movies</h1>\n    <div className='app-logo' />\n  </header>\n)\n\nexport default AppHeader\n","import React from 'react'\nimport './filter.css'\n\nconst Filter = props => (\n  <div className='movie-filter'>\n    <input type='checkbox' onChange={props.onChange} id={props.value} />\n    <label htmlFor={props.value}>{props.name}</label>\n  </div>\n)\n\nexport default Filter\n","import React from 'react'\nimport './filters.css'\nimport Filter from '../filter'\n\nconst Filters = props => (\n  <section className='movie-filters'>\n    <div className='movie-filters-genres'>\n      {Object.keys(props.genres).map(genre => (\n        <Filter\n          key={genre}\n          name={props.genres[genre]}\n          onChange={props.onChangeGenreFilters}\n          value={genre}\n        />\n      ))}\n    </div>\n    <input\n      type='number'\n      defaultValue='3'\n      min='0'\n      max='10'\n      step='0.5'\n      onChange={props.onChangeMinRating}\n      id='min-rating'\n    />\n    <label htmlFor='min-rating'>Minimum Rating</label>\n  </section>\n)\n\nexport default Filters\n","import React from 'react'\nimport './movie-card.css'\nimport { parseTitle } from '../../utilities'\nimport { API } from '../../constants'\n\nconst MovieCard = props => (\n  <div className='movie-card'>\n    <div className='movie-card-content'>\n      <img\n        className='movie-poster'\n        src={`${API.IMAGES_URI}w300${props.movie.poster_path}`}\n        alt={props.movie.title}\n      />\n      <div className='movie-info'>\n        <h3>{parseTitle(props.movie)}</h3>\n        <div className='movie-genres'>\n          <h4>Genres:</h4>\n          <ul>\n            {props.movie.genre_ids.map(genre => (\n              <li key={genre} className='genre-item'>\n                {props.genres[genre]}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className='movie-description desktop-only'>\n          <h4>Description:</h4>\n          <p>{props.movie.overview}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n)\n\nexport default MovieCard\n","/*\n * converting  the data model to a dictionary for efficiency\n * from [{id: a, name: x}, {id: b, name: y}, ...] to {a: x, b: y, ...}\n */\nexport const parseGenres = genres =>\n  genres.reduce((acc, genre) => {\n    acc[genre.id] = genre.name\n    return acc\n  }, {})\n\nexport const parseTitle = movie =>\n  `${movie.title}${\n    movie.title !== movie.original_title\n      ? ` (Original Title: ${movie.original_title})`\n      : ''\n  }`\n\nexport const filterMovies = (movies, filters = [], minRating = 3) =>\n  movies.filter(\n    movie =>\n      filters.every(filter => movie.genre_ids.includes(filter)) &&\n      movie.vote_average >= minRating,\n  )\n","import React from 'react'\nimport './movie-list.css'\nimport MovieCard from '../movie-card'\nimport { filterMovies } from '../../utilities'\n\nconst MovieList = props => (\n  <section className='movie-list'>\n    {props.error ? (\n      <p>{JSON.stringify(props.error)}</p>\n    ) : (\n      filterMovies(props.movies, props.filters, props.minRating).map(movie => (\n        <MovieCard key={movie.title} movie={movie} genres={props.genres} />\n      ))\n    )}\n  </section>\n)\n\nexport default MovieList\n","import React, { Component } from 'react'\nimport './app.css'\nimport { API } from './constants'\nimport { parseGenres } from './utilities'\nimport AppHeader from './components/app-header'\nimport Filters from './components/filters'\nimport MovieList from './components/movie-list'\n\nclass App extends Component {\n  state = { movies: [], error: null, filters: [], genres: [], minRating: 0 }\n  onChangeGenreFilters = event => {\n    const id = +event.currentTarget.id\n    const index = this.state.filters.indexOf(id)\n    this.setState({\n      filters:\n        index === -1\n          ? this.state.filters.concat(id)\n          : this.state.filters.filter(filter => filter !== id),\n    })\n  }\n  onChangeMinRating = event =>\n    this.setState({ minRating: +event.currentTarget.value })\n\n  componentDidMount() {\n    //fetching movie list\n    fetch(`${API.BASE_URI}movie/now_playing?api_key=${API.API_KEY.V3}`, {\n      'Content-Type': 'application/json',\n    })\n      .then(res => res.json())\n      .then(res => {\n        this.setState({\n          movies: res.results.sort(\n            (movA, movB) => movB.popularity - movA.popularity,\n          ),\n        })\n      })\n      .catch(error => this.setState({ error }))\n    //fetching genre list\n    fetch(`${API.BASE_URI}genre/movie/list?api_key=${API.API_KEY.V3}`, {\n      'Content-Type': 'application/json',\n    })\n      .then(res => res.json())\n      .then(res => {\n        this.setState({ genres: parseGenres(res.genres) })\n      })\n      .catch(error => this.setState({ error }))\n  }\n\n  render() {\n    return (\n      <div className='app'>\n        <AppHeader />\n        <main>\n          <Filters\n            filters={this.state.filters}\n            genres={this.state.genres}\n            onChangeGenreFilters={this.onChangeGenreFilters}\n            onChangeMinRating={this.onChangeMinRating}\n          />\n          <MovieList\n            error={this.state.error}\n            filters={this.state.filters}\n            genres={this.state.genres}\n            minRating={this.state.minRating}\n            movies={this.state.movies}\n          />\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}